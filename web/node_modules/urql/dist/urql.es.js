import { createClient as e, createRequest as t } from "@urql/core";

export * from "@urql/core";

import { createContext as r, useContext as n, useRef as u, useState as i, useCallback as a, useEffect as s, useMemo as o } from "react";

import { toPromise as c, subscribe as f, takeWhile as l, onEnd as v } from "wonka";

import { useSyncExternalStore as p } from "use-sync-external-store/shim";

var d = e({
  url: "/graphql"
});

var x = r(d);

var h = x.Provider;

var y = x.Consumer;

x.displayName = "UrqlContext";

var g = !1;

function useClient() {
  var e = n(x);
  if ("production" !== process.env.NODE_ENV && e === d && !g) {
    g = !0;
    console.warn("Default Client: No client has been specified using urql's Provider.This means that urql will be falling back to defaults including making requests to `/graphql`.\nIf that's not what you want, please create a client and add a Provider.");
  }
  return e;
}

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var r = arguments[t];
      for (var n in r) {
        if (Object.prototype.hasOwnProperty.call(r, n)) {
          e[n] = r[n];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

var b = {
  fetching: !1,
  stale: !1,
  error: void 0,
  data: void 0,
  extensions: void 0,
  operation: void 0
};

function computeNextState(e, t) {
  var r = _extends({}, e, t, {
    data: void 0 !== t.data || t.error ? t.data : e.data,
    fetching: !!t.fetching,
    stale: !!t.stale
  });
  return function isShallowDifferent(e, t) {
    if ("object" != typeof e || "object" != typeof t) {
      return e !== t;
    }
    for (var r in e) {
      if (!(r in t)) {
        return !0;
      }
    }
    for (var n in t) {
      if (e[n] !== t[n]) {
        return !0;
      }
    }
    return !1;
  }(e, r) ? r : e;
}

function hasDepsChanged(e, t) {
  for (var r = 0, n = t.length; r < n; r++) {
    if (e[r] !== t[r]) {
      return !0;
    }
  }
  return !1;
}

function useMutation(e) {
  var r = u(!0);
  var n = useClient();
  var o = i(b);
  var f = o[0];
  var l = o[1];
  var v = a((function(u, i) {
    l(_extends({}, b, {
      fetching: !0
    }));
    return c(n.executeMutation(t(e, u), i || {})).then((function(e) {
      if (r.current) {
        l({
          fetching: !1,
          stale: !!e.stale,
          data: e.data,
          error: e.error,
          extensions: e.extensions,
          operation: e.operation
        });
      }
      return e;
    }));
  }), [ n, e, l ]);
  s((function() {
    r.current = !0;
    return function() {
      r.current = !1;
    };
  }), []);
  return [ f, v ];
}

function useRequest(e, r) {
  var n = u(void 0);
  return o((function() {
    var u = t(e, r);
    if (void 0 !== n.current && n.current.key === u.key) {
      return n.current;
    } else {
      n.current = u;
      return u;
    }
  }), [ e, r ]);
}

var q = b;

var m = _extends({}, b, {
  fetching: !0
});

function isSuspense(e, t) {
  return e.suspense && (!t || !1 !== t.suspense);
}

function useQuery(e) {
  var t = useClient();
  var r = useRequest(e.query, e.variables);
  var n = function getCacheForClient(e) {
    if (!e._react) {
      var t = new Set;
      var r = new Map;
      if (e.operations$) {
        f((function(e) {
          if ("teardown" === e.kind && t.has(e.key)) {
            t.delete(e.key);
            r.delete(e.key);
          }
        }))(e.operations$);
      }
      e._react = {
        get: function get(e) {
          return r.get(e);
        },
        set: function set(e, n) {
          t.delete(e);
          r.set(e, n);
        },
        dispose: function dispose(e) {
          t.add(e);
        }
      };
    }
    return e._react;
  }(t);
  var u = [ t, r, e.pause, e.requestPolicy, e.context ];
  var s = i((function() {
    return {
      source: e.pause ? null : t.executeQuery(r, _extends({}, {
        requestPolicy: e.requestPolicy
      }, e.context)),
      prevValue: q,
      deps: u,
      suspense: isSuspense(t, e.context)
    };
  }));
  var c = s[0];
  var v = s[1];
  var d = c.source;
  var x = c.deps;
  var h = c.suspense;
  var y = o((function() {
    var e = n.get(r.key);
    return [ function() {
      if (!d) {
        return q;
      } else if (!e) {
        var t;
        var u = f((function(u) {
          e = u;
          if (h) {
            n.set(r.key, e);
          }
          if (t) {
            t(e);
            t = void 0;
          }
        }))(l((function() {
          return h && (!t || e && e.then) || !e;
        }))(d));
        if (null == e && h) {
          var i = e = new Promise((function(e) {
            t = e;
          }));
          n.set(r.key, i);
          throw i;
        } else {
          u.unsubscribe();
        }
      } else if (h && null != e && "then" in e) {
        throw e;
      }
      return e || m;
    }, function(t) {
      if (!d) {
        return function() {};
      }
      var u = f((function(u) {
        e = u;
        if (h) {
          n.set(r.key, e);
        }
        t();
      }))(d).unsubscribe;
      return function() {
        n.dispose(r.key);
        u();
      };
    } ];
  }), [ d, e.pause ]);
  var g = y[0];
  var b = y[1];
  var S = a((function(n) {
    var u = _extends({}, {
      requestPolicy: e.requestPolicy
    }, e.context, n);
    v((function(e) {
      return {
        prevValue: e.prevValue,
        deps: e.deps,
        source: t.executeQuery(r, u),
        suspense: isSuspense(t, u)
      };
    }));
  }), [ t, r, e.requestPolicy, e.context ]);
  var _ = c.prevValue = computeNextState(c.prevValue, p(b, g, g));
  if (hasDepsChanged(x, u) && !e.pause) {
    v({
      prevValue: _,
      source: e.pause ? null : t.executeQuery(r, _extends({}, {
        requestPolicy: e.requestPolicy
      }, e.context)),
      deps: u,
      suspense: isSuspense(t, e.context)
    });
  }
  return [ _, S ];
}

function useSubscription(e, t) {
  var r = useClient();
  var n = useRequest(e.query, e.variables);
  var c = u(t);
  c.current = t;
  var l = o((function() {
    return !e.pause ? r.executeSubscription(n, e.context) : null;
  }), [ r, n, e.pause, e.context ]);
  var p = [ r, n, e.context, e.pause ];
  var d = i((function() {
    return [ l, _extends({}, b, {
      fetching: !!l
    }), p ];
  }));
  var x = d[0];
  var h = d[1];
  var y = x[1];
  if (l !== x[0] && hasDepsChanged(x[2], p)) {
    h([ l, y = computeNextState(x[1], {
      fetching: !!l
    }), p ]);
  }
  s((function() {
    function updateResult(e) {
      h((function(t) {
        var r = computeNextState(t[1], e);
        if (t[1] === r) {
          return t;
        }
        if (c.current && t[1].data !== r.data) {
          r.data = c.current(t[1].data, r.data);
        }
        return [ t[0], r, t[2] ];
      }));
    }
    if (x[0]) {
      return f(updateResult)(v((function() {
        updateResult({
          fetching: !1
        });
      }))(x[0])).unsubscribe;
    } else {
      updateResult({
        fetching: !1
      });
    }
  }), [ x[0] ]);
  return [ y, a((function(t) {
    var u = r.executeSubscription(n, _extends({}, e.context, t));
    h((function(e) {
      return [ u, e[1], e[2] ];
    }));
  }), [ r, e.context, n ]) ];
}

function Mutation(e) {
  var t = useMutation(e.query);
  return e.children(_extends({}, t[0], {
    executeMutation: t[1]
  }));
}

function Query(e) {
  var t = useQuery(e);
  return e.children(_extends({}, t[0], {
    executeQuery: t[1]
  }));
}

function Subscription(e) {
  var t = useSubscription(e, e.handler);
  return e.children(_extends({}, t[0], {
    executeSubscription: t[1]
  }));
}

export { y as Consumer, x as Context, Mutation, h as Provider, Query, Subscription, useClient, useMutation, useQuery, useSubscription };
//# sourceMappingURL=urql.es.js.map
