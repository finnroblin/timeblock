{"version":3,"file":"urql.min.es.js","sources":["../src/context.ts","../src/hooks/state.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/useQuery.ts","../src/hooks/cache.ts","../src/hooks/useSubscription.ts","../src/components/Mutation.ts","../src/components/Query.ts","../src/components/Subscription.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { Client, createClient } from '@urql/core';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\nContext.displayName = 'UrqlContext';\n\nlet hasWarnedAboutDefault = false;\n\nexport const useClient = (): Client => {\n  const client = useContext(Context);\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    client === defaultClient &&\n    !hasWarnedAboutDefault\n  ) {\n    hasWarnedAboutDefault = true;\n\n    console.warn(\n      \"Default Client: No client has been specified using urql's Provider.\" +\n        'This means that urql will be falling back to defaults including making ' +\n        'requests to `/graphql`.\\n' +\n        \"If that's not what you want, please create a client and add a Provider.\"\n    );\n  }\n\n  return client;\n};\n","export const initialState = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n  operation: undefined,\n};\n\nconst isShallowDifferent = (a: any, b: any) => {\n  if (typeof a != 'object' || typeof b != 'object') return a !== b;\n  for (const x in a) if (!(x in b)) return true;\n  for (const x in b) if (a[x] !== b[x]) return true;\n  return false;\n};\n\ninterface Stateish {\n  data?: any;\n  error?: any;\n  fetching: boolean;\n  stale: boolean;\n}\n\nexport const computeNextState = <T extends Stateish>(\n  prevState: T,\n  result: Partial<T>\n): T => {\n  const newState = {\n    ...prevState,\n    ...result,\n    data:\n      result.data !== undefined || result.error ? result.data : prevState.data,\n    fetching: !!result.fetching,\n    stale: !!result.stale,\n  };\n\n  return isShallowDifferent(prevState, newState) ? newState : prevState;\n};\n\nexport const hasDepsChanged = <T extends { length: number }>(a: T, b: T) => {\n  for (let i = 0, l = b.length; i < l; i++) if (a[i] !== b[i]) return true;\n  return false;\n};\n","import { DocumentNode } from 'graphql';\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { pipe, toPromise } from 'wonka';\n\nimport {\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n  CombinedError,\n  createRequest,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { initialState } from './state';\n\nexport interface UseMutationState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseMutationResponse<Data = any, Variables = object> = [\n  UseMutationState<Data, Variables>,\n  (\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>\n];\n\nexport function useMutation<Data = any, Variables = object>(\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string\n): UseMutationResponse<Data, Variables> {\n  const isMounted = useRef(true);\n  const client = useClient();\n\n  const [state, setState] = useState<UseMutationState<Data, Variables>>(\n    initialState\n  );\n\n  const executeMutation = useCallback(\n    (variables?: Variables, context?: Partial<OperationContext>) => {\n      setState({ ...initialState, fetching: true });\n\n      return pipe(\n        client.executeMutation<Data, Variables>(\n          createRequest<Data, Variables>(query, variables),\n          context || {}\n        ),\n        toPromise\n      ).then(result => {\n        if (isMounted.current) {\n          setState({\n            fetching: false,\n            stale: !!result.stale,\n            data: result.data,\n            error: result.error,\n            extensions: result.extensions,\n            operation: result.operation,\n          });\n        }\n        return result;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [client, query, setState]\n  );\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [state, executeMutation];\n}\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport { TypedDocumentNode, GraphQLRequest, createRequest } from '@urql/core';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport function useRequest<Data = any, Variables = object>(\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>,\n  variables?: Variables\n): GraphQLRequest<Data, Variables> {\n  const prev = useRef<undefined | GraphQLRequest<Data, Variables>>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest<Data, Variables>(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, takeWhile } from 'wonka';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nimport {\n  Client,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  OperationResult,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { hasDepsChanged, computeNextState, initialState } from './state';\nimport { getCacheForClient } from './cache';\n\nexport interface UseQueryArgs<Variables = object, Data = any> {\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  variables?: Variables;\n  requestPolicy?: RequestPolicy;\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n}\n\nexport interface UseQueryState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseQueryResponse<Data = any, Variables = object> = [\n  UseQueryState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nconst notFetching = initialState;\nconst fetching = { ...initialState, fetching: true };\n\nconst isSuspense = (client: Client, context?: Partial<OperationContext>) =>\n  client.suspense && (!context || context.suspense !== false);\n\nexport function useQuery<Data = any, Variables = object>(\n  args: UseQueryArgs<Variables, Data>\n): UseQueryResponse<Data, Variables> {\n  const client = useClient();\n  const request = useRequest<Data, Variables>(args.query, args.variables);\n  const cache = getCacheForClient(client);\n\n  const currDeps: unknown[] = [\n    client,\n    request,\n    args.pause,\n    args.requestPolicy,\n    args.context,\n  ];\n\n  const [meta, setMeta] = useState<{\n    source: Source<OperationResult<Data, Variables>> | null;\n    prevValue: UseQueryState<Data, Variables>;\n    deps: unknown[];\n    suspense: boolean;\n  }>(() => ({\n    source: args.pause\n      ? null\n      : client.executeQuery(request, {\n          requestPolicy: args.requestPolicy,\n          ...args.context,\n        }),\n    prevValue: notFetching,\n    deps: currDeps,\n    suspense: isSuspense(client, args.context),\n  }));\n\n  const { source, deps, suspense } = meta;\n\n  const [getSnapshot, sub] = useMemo(() => {\n    let result = cache.get(request.key);\n\n    const getSnapshot = (): Partial<UseQueryState<Data, Variables>> => {\n      if (!source) {\n        return notFetching;\n      } else if (!result) {\n        let resolve:\n          | ((result: OperationResult<Data, Variables>) => void)\n          | undefined;\n\n        const subscription = pipe(\n          source,\n          takeWhile(\n            () =>\n              (suspense && (!resolve || (result && (result as any).then))) ||\n              !result\n          ),\n          subscribe(_result => {\n            result = _result;\n            if (suspense) {\n              cache.set(request.key, result);\n            }\n\n            if (resolve) {\n              resolve(result);\n              resolve = undefined;\n            }\n          })\n        );\n\n        if (result == null && suspense) {\n          const promise = (result = new Promise(_resolve => {\n            resolve = _resolve;\n          }));\n          cache.set(request.key, promise);\n          throw promise;\n        } else {\n          subscription.unsubscribe();\n        }\n      } else if (suspense && result != null && 'then' in result) {\n        throw result;\n      }\n\n      return (result as OperationResult<Data, Variables>) || fetching;\n    };\n\n    const sub = (notify: () => void) => {\n      if (!source) {\n        return () => {\n          /*noop*/\n        };\n      }\n\n      const unsub = pipe(\n        source,\n        subscribe(_result => {\n          result = _result;\n          if (suspense) {\n            cache.set(request.key, result);\n          }\n          notify();\n        })\n      ).unsubscribe;\n\n      return () => {\n        cache.dispose(request.key);\n        unsub();\n      };\n    };\n\n    return [getSnapshot, sub];\n  }, [source, args.pause]);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const context = {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      };\n\n      setMeta(prev => ({\n        prevValue: prev.prevValue,\n        deps: prev.deps,\n        source: client.executeQuery(request, context),\n        suspense: isSuspense(client, context),\n      }));\n    },\n    [client, request, args.requestPolicy, args.context]\n  );\n\n  const result = (meta.prevValue = computeNextState(\n    meta.prevValue,\n    useSyncExternalStore<Partial<UseQueryState<Data, Variables>>>(\n      sub,\n      getSnapshot,\n      getSnapshot\n    )\n  ));\n\n  if (hasDepsChanged(deps, currDeps) && !args.pause) {\n    setMeta({\n      prevValue: result,\n      source: args.pause\n        ? null\n        : client.executeQuery(request, {\n            requestPolicy: args.requestPolicy,\n            ...args.context,\n          }),\n      deps: currDeps,\n      suspense: isSuspense(client, args.context),\n    });\n  }\n\n  return [result, executeQuery];\n}\n","import { pipe, subscribe } from 'wonka';\nimport { Client, OperationResult } from '@urql/core';\n\ntype CacheEntry = OperationResult | Promise<unknown> | undefined;\n\ninterface Cache {\n  get(key: number): CacheEntry;\n  set(key: number, value: CacheEntry): void;\n  dispose(key: number): void;\n}\n\ninterface ClientWithCache extends Client {\n  _react?: Cache;\n}\n\nexport const getCacheForClient = (client: Client): Cache => {\n  if (!(client as ClientWithCache)._react) {\n    const reclaim = new Set();\n    const map = new Map<number, CacheEntry>();\n\n    if (client.operations$ /* not available in mocks */) {\n      pipe(\n        client.operations$,\n        subscribe(operation => {\n          if (operation.kind === 'teardown' && reclaim.has(operation.key)) {\n            reclaim.delete(operation.key);\n            map.delete(operation.key);\n          }\n        })\n      );\n    }\n\n    (client as ClientWithCache)._react = {\n      get(key) {\n        return map.get(key);\n      },\n      set(key, value) {\n        reclaim.delete(key);\n        map.set(key, value);\n      },\n      dispose(key) {\n        reclaim.add(key);\n      },\n    };\n  }\n\n  return (client as ClientWithCache)._react!;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { pipe, subscribe, onEnd } from 'wonka';\nimport { useEffect, useState, useCallback, useMemo, useRef } from 'react';\n\nimport {\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport interface UseSubscriptionArgs<Variables = object, Data = any> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  variables?: Variables;\n  pause?: boolean;\n  context?: Partial<OperationContext>;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseSubscriptionResponse<Data = any, Variables = object> = [\n  UseSubscriptionState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport function useSubscription<Data = any, Result = Data, Variables = object>(\n  args: UseSubscriptionArgs<Variables, Data>,\n  handler?: SubscriptionHandler<Data, Result>\n): UseSubscriptionResponse<Result, Variables> {\n  const client = useClient();\n  const request = useRequest<Data, Variables>(args.query, args.variables);\n\n  const handlerRef = useRef<SubscriptionHandler<Data, Result> | undefined>(\n    handler\n  );\n  handlerRef.current = handler;\n\n  const source = useMemo(\n    () =>\n      !args.pause ? client.executeSubscription(request, args.context) : null,\n    [client, request, args.pause, args.context]\n  );\n\n  const deps = [client, request, args.context, args.pause] as const;\n\n  const [state, setState] = useState(\n    () => [source, { ...initialState, fetching: !!source }, deps] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(state[1], { fetching: !!source })),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const updateResult = (\n      result: Partial<UseSubscriptionState<Data, Variables>>\n    ) => {\n      setState(state => {\n        const nextResult = computeNextState(state[1], result);\n        if (state[1] === nextResult) return state;\n        if (handlerRef.current && state[1].data !== nextResult.data) {\n          nextResult.data = handlerRef.current(\n            state[1].data,\n            nextResult.data!\n          ) as any;\n        }\n\n        return [state[0], nextResult as any, state[2]];\n      });\n    };\n\n    if (state[0]) {\n      return pipe(\n        state[0],\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      ).unsubscribe;\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [state[0]]);\n\n  // This is the imperative execute function passed to the user\n  const executeSubscription = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const source = client.executeSubscription(request, {\n        ...args.context,\n        ...opts,\n      });\n\n      setState(state => [source, state[1], state[2]]);\n    },\n    [client, args.context, request]\n  );\n\n  return [currentResult, executeSubscription];\n}\n","import { DocumentNode } from 'graphql';\nimport { ReactElement } from 'react';\nimport {\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n} from '@urql/core';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<Data = any, Variables = object> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  children: (arg: MutationState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface MutationState<Data = any, Variables = object>\n  extends UseMutationState<Data, Variables> {\n  executeMutation: (\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>;\n}\n\nexport function Mutation<Data = any, Variables = any>(\n  props: MutationProps<Data, Variables>\n): ReactElement<any> {\n  const mutation = useMutation<Data, Variables>(props.query);\n  return props.children({ ...mutation[0], executeMutation: mutation[1] });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '@urql/core';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport interface QueryProps<Data = any, Variables = object>\n  extends UseQueryArgs<Variables, Data> {\n  children: (arg: QueryState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface QueryState<Data = any, Variables = object>\n  extends UseQueryState<Data, Variables> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<Data = any, Variables = any>(\n  props: QueryProps<Data, Variables>\n): ReactElement<any> {\n  const query = useQuery<Data, Variables>(props);\n  return props.children({ ...query[0], executeQuery: query[1] });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '@urql/core';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport interface SubscriptionProps<\n  Data = any,\n  Result = Data,\n  Variables = object\n> extends UseSubscriptionArgs<Variables, Data> {\n  handler?: SubscriptionHandler<Data, Result>;\n  children: (arg: SubscriptionState<Result, Variables>) => ReactElement<any>;\n}\n\nexport interface SubscriptionState<Data = any, Variables = object>\n  extends UseSubscriptionState<Data, Variables> {\n  executeSubscription: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Subscription<Data = any, Result = Data, Variables = object>(\n  props: SubscriptionProps<Data, Result, Variables>\n): ReactElement<any> {\n  const subscription = useSubscription<Data, Result, Variables>(\n    props,\n    props.handler\n  );\n\n  return props.children({\n    ...subscription[0],\n    executeSubscription: subscription[1],\n  });\n}\n"],"names":["Context","let","fetching","stale","undefined","error","data","extensions","prevState","result","b","hasDepsChanged","a","i","l","length","useMutation","query","isMounted","useRef","client","useClient","useState","initialState","executeMutation","useCallback","variables","context","setState","_extends","toPromise","createRequest","then","current","operation","useEffect","state","useRequest","prev","useMemo","request","key","const","notFetching","isSuspense","suspense","useQuery","args","cache","_react","reclaim","Set","map","Map","operations$","subscribe","kind","has","delete","get","set","value","dispose","add","getCacheForClient","currDeps","pause","requestPolicy","source","executeQuery","prevValue","deps","resolve","subscription","_result","takeWhile","promise","Promise","_resolve","unsubscribe","notify","unsub","opts","setMeta","meta","computeNextState","useSyncExternalStore","sub","getSnapshot","useSubscription","handler","handlerRef","executeSubscription","currentResult","updateResult","nextResult","onEnd","Mutation","props","mutation","children","Query","Subscription"],"mappings":"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"}